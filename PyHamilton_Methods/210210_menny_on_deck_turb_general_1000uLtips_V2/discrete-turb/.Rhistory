rowids = round(as.numeric(rownames(plotdat))*100)/100
colids = round(as.numeric(colnames(plotdat))*100)/100
persp3D(x = rowids, y = colids, z = plotdat,
zlim = c(min(landscape$flow_rate), max(landscape$flow_rate)),
col = mycols(256), clim=c(min(landscape$flow_rate), max(landscape$flow_rate)),
alpha = 0.5,
clab = "Growth Rate \n(Volumes/hr)",
xlab = "Nitrogen",
ylab = "Carbon",
zlab = "Growth rate (volumes/hr)",
# ticktype = "detailed",
main = paste(as.fractions(2^Pdoses[i]),"X Phosphorus",sep = ""),
theta = -60, phi = 30, expand = .5)
}
dev.off()
detach("package:MASS")
library(RSQLite)
library(dplyr)
library(ggplot2)
library(rstudioapi)
library(data.table)
library(stringr)
library(chron)
library(grid)
library(ggnewscale)
library(RColorBrewer)
detach("package:plyr")
detach("package:MASS")
# Get working directory of current file
current_working_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(current_working_dir)
setwd("..")
# load experiment manifest
manifest = fread("util/Manifest.csv")
manifest$lagoon_number = rep(0:95, nrow(manifest)/96)
# Extract data from log files
log = fread("method_local/log/main.log", sep = NULL, header = FALSE)
plateid = log %>% filter(grepl("Moving plate reader_tray", V1))
plateid = plateid$V1
plateid = gsub("00001","",plateid)
plateid = gsub("00002","",plateid)
plateid = gsub('^.*Moving plate reader_tray_ to \\s*', '', plateid)
times = log %>% filter(grepl("Moving plate reader_tray", V1))
times = gsub('\\s* root.*$', '', times$V1)
times = gsub("\\[", "", times)
times = gsub("\\]", "", times)
times = gsub('\\s*,.*$', '', times)
times = as.POSIXct(times)
startdate = log %>% filter(grepl("Moving plate reader_tray", V1))
startdate = min(as.Date(gsub('\\s* .*$', '', times)))
# get SQL database
getdb = list.files("method_local/")
getdb = getdb[grep(".db",getdb)][1]
########
conn <- dbConnect(RSQLite::SQLite(), paste("method_local/", getdb[1], sep = ""))
dbListTables(conn)
data = dbGetQuery(conn, "SELECT * FROM measurements") # convert to dataframe\
dbDisconnect(conn) # disconnect from database
#########
data$order = as.numeric(row.names(data)) # make sure data stays ordered
data = data %>% select(-filename, -measurement_delay_time)
data$lagoon_number = rep(0:95, nrow(data)/96)
data = data %>% group_by(plate_id, lagoon_number, data_type) %>% mutate(timepoint = row_number())
tail(data)
flowrates = log %>% filter(grepl("FLOW RATES", V1))
flowrates = gsub('^.*RATES \\s*', '', flowrates$V1)
flowrates = gsub("\\[", "", flowrates)
flowrates = gsub("\\]", "", flowrates)
flowrates = gsub(" ", "", flowrates)
flowrates = str_split_fixed(string = flowrates, pattern = "," ,n = 96)
class(flowrates) = "numeric"
flowrates = as.data.frame(flowrates)
colnames(flowrates) = 0:95
flowrates$time = times[1:nrow(flowrates)]
flowrates$plate_id = plateid[1:nrow(flowrates)]
flowrates = reshape2::melt(flowrates, id.vars = c("time", "plate_id"))
colnames(flowrates) = c("time", "plate_id", "lagoon_number", "flow_rate")
tail(flowrates)
odestimates = log %>% filter(grepl("CONVERTED OD READINGS", V1))
odestimates = gsub('^.*READINGS \\s*', '', odestimates$V1)
odestimates = gsub("\\[", "", odestimates)
odestimates = gsub("\\]", "", odestimates)
odestimates = gsub(" ", "", odestimates)
odestimates = str_split_fixed(string = odestimates, pattern = "," ,n = 96)
class(odestimates) = "numeric"
odestimates = as.data.frame(odestimates)
colnames(odestimates) = 0:95
odestimates$time = times[1:nrow(odestimates)]
odestimates$plate_id = plateid[1:nrow(odestimates)]
odestimates = reshape2::melt(odestimates, id.vars = c("time", "plate_id"))
colnames(odestimates) = c("time", "plate_id", "lagoon_number", "OD")
tail(odestimates)
repvols = log %>% filter(grepl("REPLACEMENT VOLUMES", V1))
repvols = gsub('^.*VOLUMES \\s*', '', repvols$V1)
repvols = gsub("\\[", "", repvols)
repvols = gsub("\\]", "", repvols)
repvols = gsub(" ", "", repvols)
repvols = str_split_fixed(string = repvols, pattern = "," ,n = 96)
class(repvols) = "numeric"
repvols = as.data.frame(repvols)
colnames(repvols) = 0:95
repvols$time = times[1:nrow(repvols)]
repvols$plate_id = plateid[1:nrow(repvols)]
repvols = reshape2::melt(repvols, id.vars = c("time", "plate_id"))
colnames(repvols) = c("time", "plate_id", "lagoon_number", "vols")
tail(repvols)
kest = log %>% filter(grepl("K ESTIMATES", V1))
kest = gsub('^.*ESTIMATES \\s*', '', kest$V1)
kest = gsub("\\[", "", kest)
kest = gsub("\\]", "", kest)
kest = gsub(" ", "", kest)
kest = str_split_fixed(string = kest, pattern = "," ,n = 96)
class(kest) = "numeric"
kest = as.data.frame(kest)
colnames(kest) = 0:95
kest$time = times[1:nrow(kest)]
kest$plate_id = plateid[1:nrow(kest)]
kest = reshape2::melt(kest, id.vars = c("time", "plate_id"))
colnames(kest) = c("time", "plate_id", "lagoon_number", "kest")
tail(kest)
log_data = merge(flowrates, kest)
log_data = merge(log_data, odestimates)
log_data = merge(log_data, repvols)
log_data = log_data %>% group_by(plate_id, lagoon_number) %>% mutate(timepoint = row_number())
tail(log_data)
# merge the manifest and log into a single file
data = merge(data, manifest, x.all = TRUE) %>% arrange(order)
tail(data)
all_data = merge(data, log_data)
tail(all_data)
all_data = all_data %>% arrange(time)
all_data = all_data %>% mutate(timestamp = difftime(max(time),min(time),units = "hours"),
timestamp = timestamp*timepoint/max(timepoint),
timestamp = as.numeric(timestamp),
timestamp = round(timestamp, digits = 1),
timestamp = timestamp - min(timestamp))
all_data$lagoon_number = factor(all_data$lagoon_number)
all_data$Row = str_split_fixed(all_data$well,"", 2)[,1]
all_data$Col = as.numeric(str_split_fixed(all_data$well,"", 2)[,2])
all_data$data_type =  toupper(all_data$data_type)
all_data$OD_set = round(all_data$OD_set,2)
tail(all_data)
dir.create("util/Figures")
setwd("util/Figures")
range = c(0, (ceiling(max(all_data$timestamp))-1)/2, max(all_data$timestamp))
ODlimits = round(c(0, max(all_data$OD)*.6), digits = 1)
background_cols = rev(brewer.pal(6, "Reds"))
backgrounds = all_data %>% group_by(Col, Row, plate_id, data_type) %>% mutate(reading = 0, timestamp = 0, OD = 0) %>% filter(row_number() == 1)
# Plot ODs over time
# Calibration Experiment
Abs = ggplot(all_data %>% filter(data_type == "ABS"),
aes(x = timestamp, y = reading, color = factor(N), alpha = factor(P))) +
geom_rect(data = backgrounds %>% filter(data_type == "ABS"), aes(xmin=0,xmax=max(range),ymin=-Inf,ymax=Inf, fill = plate_id), alpha = 0.5, colour=NA) +
scale_fill_manual(values = background_cols) +
new_scale("fill") +
# geom_area() +
geom_line(size = 1, color = "white") +
geom_point(size = 1, color = "white") +
geom_line(size = 1) +
geom_point(size = 1) +
facet_grid(plate_id + Row ~ Col ) +
scale_color_brewer(palette = "Blues")+
guides(fill = FALSE) +
scale_x_continuous(name = "Elapsed Time (hr)", breaks = ceiling(range[1:2]), limits = c(0,max(range)))+
scale_y_continuous(name = "Plate Reading, Absorbance (OD600)", breaks = c(0.1,0.2)) +
ggtitle("Absorbance (OD600)") +
theme_minimal() +
theme(legend.background = element_rect(color = "white", fill = "white"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black"))
pdf(paste(Sys.Date(),"Abs.pdf"), height = 11, width = 8)
print(Abs)
dev.off()
# Calibration Experiment
ODs = ggplot(all_data %>% filter(data_type == "ABS"),
aes(x = timestamp, y = OD, color = factor(N), alpha = factor(P))) +
geom_rect(data = backgrounds %>% filter(data_type == "ABS"),
aes(xmin=0,xmax=max(range),ymin=-Inf,ymax=Inf, fill = plate_id), alpha = 0.5, colour=NA) +
scale_fill_manual(values = background_cols) +
new_scale("fill") +
# geom_area() +
geom_line(size = 1, color = "white") +
geom_point(size = 1, color = "white") +
geom_line(size = 1) +
geom_point(size = 1) +
facet_grid(plate_id + Row ~ Col ) +
scale_color_brewer(palette = "Blues")+
guides(fill = FALSE) +
scale_x_continuous(name = "Elapsed Time (hr)", breaks = ceiling(range[1:2]), limits = c(0,max(range)))+
scale_y_continuous(name = "Converted Absorbance (OD600)", breaks = c(0.3, 0.6)) +
ggtitle("Absorbance (OD600)") +
theme_minimal() +
theme(legend.background = element_rect(color = "white", fill = "white"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black"))
pdf(paste(Sys.Date(),"ODs.pdf"), height = 11, width = 8)
print(ODs)
dev.off()
# Normalize to time t = 1 for each sample
norm_timepoint = 1
odset = 1
norm_points = all_data %>% filter(P == 1,
C == 1,
N == 1) %>%
group_by(data_type) %>% summarise(Norm = mean(reading))
FL_data = merge(all_data, norm_points, all.x = TRUE)
# Normalize to background of each plate
FL_data = FL_data %>%
group_by(plate_id, data_type) %>% mutate(Norm = 1*(reading - min(reading))/(Norm - min(reading)))
backgrounds$Norm = 0
# Calibration Experiment
FPs = ggplot(data = FL_data %>% filter(data_type %in% c("ABS","RFP")),
aes(x = timestamp, y = Norm, color = factor(N), alpha = factor(P))) +
geom_rect(data = backgrounds %>% filter(data_type %in% c("ABS","RFP")),
aes(xmin=0,xmax=max(range),ymin=-Inf,ymax=Inf, fill = plate_id), alpha = 0.5, colour=NA) +
geom_area(data = FL_data %>% filter(data_type %in% c("ABS","RFP")),
aes(x = timestamp, y = Norm, color = factor(N), alpha = factor(P)), fill = "white",
alpha = 1, position = "dodge", stat = "identity", linetype = 0)+
scale_fill_manual(values = background_cols) +
# geom_area() +
geom_line(size = 1, color = "white") +
geom_point(size = 1, color = "white") +
geom_line(size = 1) +
geom_point(size = 1) +
facet_grid(plate_id + Row ~ data_type + Col) +
scale_color_brewer(palette = "Blues")+
guides(fill = FALSE) +
scale_x_continuous(name = "Elapsed Time (hr)", breaks = ceiling(range[1:2]), limits = c(0,max(range)))+
scale_y_continuous(name = "Plate Reader Measurement (Normalized)") +
ggtitle("Absorbance and Fluorescence") +
theme_minimal() +
theme(legend.background = element_rect(color = "white", fill = "white"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black"))
pdf(paste(Sys.Date(),"FPs.pdf"), height = 24, width = 15)
print(FPs)
dev.off()
flowdata = all_data %>% select(lagoon_number, plate_id, timepoint, well, C, N, P, timestamp, time, flow_rate, vols, kest, Row, Col)
flowdata = unique(flowdata)
backgrounds_flow = backgrounds
backgrounds_flow = backgrounds_flow %>% filter(data_type == "ABS")
# plot flowrates over time
flowrate = ggplot(flowdata,
aes(x = timestamp, y = flow_rate, color = factor(N), alpha = factor(P))) +
geom_rect(data = backgrounds_flow,
aes(xmin=0,xmax=max(range),ymin=-Inf,ymax=Inf, fill = plate_id), alpha = 0.5, colour=NA) +
geom_area(fill = "white", alpha = 1, position = "dodge", stat = "identity", linetype = 0)+
scale_fill_manual(values = background_cols) +
geom_line(size = 1, color = "white") +
geom_point(size = 1, color = "white") +
geom_line(size = 1) +
geom_point(size = 1) +
facet_grid(plate_id + Row ~ + Col) +
scale_color_brewer(palette = "Blues")+
guides(fill = FALSE) +
scale_x_continuous(name = "Elapsed Time (hr)", breaks = ceiling(range[1:2]), limits = c(0,max(range)))+
scale_y_continuous(name = "Flow Rate (volumes/hr)", breaks = 1) +
ggtitle("Absorbance and Fluorescence") +
theme_minimal() +
theme(legend.background = element_rect(color = "white", fill = "white"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black"))
pdf(paste(Sys.Date(),"flowrates.pdf"), height = 12, width = 12)
print(flowrate)
dev.off()
# plot flowrates over time
k_estimates = ggplot(flowdata %>% filter(!(C==0 & N==0 & P==0)),
aes(x = timestamp, y = kest, color = factor(N), alpha = factor(P))) +
geom_rect(data = backgrounds_flow,
aes(xmin=0,xmax=max(range),ymin=-Inf,ymax=Inf, fill = plate_id), alpha = 0.5, colour=NA) +
geom_area(fill = "white", alpha = 1, position = "dodge", stat = "identity", linetype = 0)+
scale_fill_manual(values = background_cols) +
geom_line(size = 1, color = "white") +
geom_point(size = 1, color = "white") +
geom_line(size = 1) +
geom_point(size = 1) +
facet_grid(plate_id + Row ~ + Col) +
scale_color_brewer(palette = "Blues")+
guides(fill = FALSE) +
scale_x_continuous(name = "Elapsed Time (hr)", breaks = ceiling(range[1:2]), limits = c(0,max(range)))+
scale_y_continuous(name = "K estimate", breaks = c(0.5,1)) +
ggtitle("K Estimates for each Turbidostat") +
theme_minimal() +
theme(legend.background = element_rect(color = "white", fill = "white"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black"))
pdf(paste(Sys.Date(),"k_estimates.pdf"), height = 12, width = 12)
print(k_estimates)
dev.off()
# Plot average flow rates -------------------------------------------------
landscape = flowdata %>% filter(!(C == 0 & N == 0 & P ==0)) %>%
group_by(C,N,P) %>%
summarise(sd_vols = sd(vols), sd_flow_rate = sd(flow_rate), flow_rate = mean(flow_rate), vols = mean(vols)) %>% data.frame() %>%
mutate(C = log2(C), N = log2(N), P = log2(P))
library(reshape2)
library(plot3D)
library(Thermimage)
mycols <- colorRampPalette(rev(c("red", "orange", "yellow", "green", "blue", "blueviolet", "purple")))
Pdoses = unique(landscape$P)
library(MASS)
pdf(paste(Sys.Date(),"landscapes.pdf"), height = 12, width = 9)
par(mfrow = c(3, 2))
for (i in 1:length(Pdoses)) {
plotdat = landscape %>% filter(P == Pdoses[i] )
plotdat = t(acast(plotdat, N~C,  value.var = "flow_rate"))
rowids = round(as.numeric(rownames(plotdat))*100)/100
colids = round(as.numeric(colnames(plotdat))*100)/100
persp3D(x = rowids, y = colids, z = plotdat,
zlim = c(min(landscape$flow_rate), max(landscape$flow_rate)),
col = mycols(256), clim=c(min(landscape$flow_rate), max(landscape$flow_rate)),
alpha = 0.5,
clab = "Growth Rate \n(Volumes/hr)",
xlab = "Nitrogen",
ylab = "Carbon",
zlab = "Growth rate (volumes/hr)",
# ticktype = "detailed",
main = paste(as.fractions(2^Pdoses[i]),"X Phosphorus",sep = ""),
theta = -60, phi = 30, expand = .5)
}
dev.off()
detach("package:MASS")
Abs = ggplot(all_data %>% filter(data_type == "ABS"),
aes(x = timestamp, y = reading, color = factor(N), alpha = factor(P))) +
geom_rect(data = backgrounds %>% filter(data_type == "ABS"), aes(xmin=0,xmax=max(range),ymin=-Inf,ymax=Inf, fill = plate_id), alpha = 0.5, colour=NA) +
scale_fill_manual(values = background_cols) +
new_scale("fill") +
# geom_area() +
geom_line(size = 1, color = "white") +
geom_point(size = 1, color = "white") +
geom_line(size = 1) +
geom_point(size = 1) +
facet_grid(plate_id + Row ~ Col ) +
scale_color_brewer(palette = "Blues")+
guides(fill = FALSE) +
scale_x_continuous(name = "Elapsed Time (hr)", breaks = ceiling(range[1:2]), limits = c(0,max(range)))+
scale_y_continuous(name = "Plate Reading, Absorbance (OD600)", breaks = c(0.1,0.2), limits = c(0,.3)) +
ggtitle("Absorbance (OD600)") +
theme_minimal() +
theme(legend.background = element_rect(color = "white", fill = "white"),
panel.spacing = unit(0, "lines"),
panel.border = element_rect(color = "black", fill = NA, size = 0.5),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.ticks = element_line(colour = "black"))
pdf(paste(Sys.Date(),"Abs.pdf"), height = 11, width = 8)
print(Abs)
dev.off()
library(RSQLite)
library(dplyr)
library(ggplot2)
library(rstudioapi)
library(data.table)
library(stringr)
library(chron)
library(grid)
library(ggthemes)
library(sendmailR)
# Every 30 min, run the program to notify me if the volumes are less than 200 in any well
refiltime = as.POSIXct("2020-01-17 09:00:47 EST")
# Get working directory of current file
# only when using in Rstudio
current_working_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(current_working_dir)
setwd("..")
for (time in 1:1000) {
# 30 min =
print(Sys.time())
# load experiment manifest
manifest = fread("util/Manifest.csv")
manifest$lagoon_number = rep(0:95, nrow(manifest)/96)
# Extract data from log files
log = fread("method_local/log/main.log", sep = NULL, header = FALSE)
plateid = log %>% filter(grepl("Moving plate reader_tray", V1))
plateid = plateid$V1
plateid = gsub("00001","",plateid)
plateid = gsub("00002","",plateid)
plateid = gsub('^.*Moving plate reader_tray_ to \\s*', '', plateid)
times = log %>% filter(grepl("Moving plate reader_tray", V1))
times = gsub('\\s* root.*$', '', times$V1)
times = gsub("\\[", "", times)
times = gsub("\\]", "", times)
times = gsub('\\s*,.*$', '', times)
times = as.POSIXct(times)
startdate = log %>% filter(grepl("Moving plate reader_tray", V1))
startdate = min(as.Date(gsub('\\s* .*$', '', times)))
# get SQL database
getdb = list.files("method_local/")
getdb = getdb[grep(".db",getdb)][1]
conn <- dbConnect(RSQLite::SQLite(), paste("method_local/", getdb[1], sep = ""))
dbListTables(conn)
data = dbGetQuery(conn, "SELECT * FROM measurements") # convert to dataframe\
dbDisconnect(conn) # disconnect from database
data$order = as.numeric(row.names(data)) # make sure data stays ordered
data = data %>% select(-filename, -measurement_delay_time)
data$lagoon_number = rep(0:95, nrow(data)/96)
data = data %>% group_by(plate_id, lagoon_number, data_type) %>% mutate(timepoint = row_number())
flowrates = log %>% filter(grepl("FLOW RATES", V1))
flowrates = gsub('^.*RATES \\s*', '', flowrates$V1)
flowrates = gsub("\\[", "", flowrates)
flowrates = gsub("\\]", "", flowrates)
flowrates = gsub(" ", "", flowrates)
flowrates = str_split_fixed(string = flowrates, pattern = "," ,n = 96)
class(flowrates) = "numeric"
flowrates = as.data.frame(flowrates)
colnames(flowrates) = 0:95
flowrates$time = times[1:nrow(flowrates)]
flowrates$plate_id = plateid[1:nrow(flowrates)]
flowrates = reshape2::melt(flowrates, id.vars = c("time", "plate_id"))
colnames(flowrates) = c("time", "plate_id", "lagoon_number", "flow_rate")
odestimates = log %>% filter(grepl("CONVERTED OD READINGS", V1))
odestimates = gsub('^.*READINGS \\s*', '', odestimates$V1)
odestimates = gsub("\\[", "", odestimates)
odestimates = gsub("\\]", "", odestimates)
odestimates = gsub(" ", "", odestimates)
odestimates = str_split_fixed(string = odestimates, pattern = "," ,n = 96)
class(odestimates) = "numeric"
odestimates = as.data.frame(odestimates)
colnames(odestimates) = 0:95
odestimates$time = times[1:nrow(odestimates)]
odestimates$plate_id = plateid[1:nrow(odestimates)]
odestimates = reshape2::melt(odestimates, id.vars = c("time", "plate_id"))
colnames(odestimates) = c("time", "plate_id", "lagoon_number", "OD")
repvols = log %>% filter(grepl("REPLACEMENT VOLUMES", V1))
repvols = gsub('^.*VOLUMES \\s*', '', repvols$V1)
repvols = gsub("\\[", "", repvols)
repvols = gsub("\\]", "", repvols)
repvols = gsub(" ", "", repvols)
repvols = str_split_fixed(string = repvols, pattern = "," ,n = 96)
class(repvols) = "numeric"
repvols = as.data.frame(repvols)
colnames(repvols) = 0:95
repvols$time = times[1:nrow(repvols)]
repvols$plate_id = plateid[1:nrow(repvols)]
repvols = reshape2::melt(repvols, id.vars = c("time", "plate_id"))
colnames(repvols) = c("time", "plate_id", "lagoon_number", "vols")
# log_data = merge(flowrates, kestimates)
log_data = merge(flowrates, odestimates)
log_data = merge(log_data, repvols)
log_data = log_data %>% group_by(plate_id, lagoon_number) %>% mutate(timepoint = row_number())
# merge the manifest and log into a single file
data = merge(data, manifest, x.all = TRUE) %>% arrange(order)
all_data = merge(data, log_data)
all_data = all_data %>% mutate(timestamp = max(time) - min(time),
timestamp = timestamp*timepoint/max(timepoint),
timestamp = as.numeric(timestamp),
timestamp = round(timestamp, digits = 1),
timestamp = timestamp - min(timestamp))
all_data$lagoon_number = factor(all_data$lagoon_number)
all_data$Row = str_split_fixed(all_data$well,"", 2)[,1]
all_data$Col = as.numeric(str_split_fixed(all_data$well,"", 2)[,2])
# Get rid of stupid high datapoints
all_data = all_data %>% filter(!OD>1.5)
range = c(0, (ceiling(max(all_data$timestamp))-1)/2, max(all_data$timestamp))
flowdata = all_data %>% select(lagoon_number, plate_id, timepoint, well, N,C,P, timestamp, time, flow_rate, vols, Row, Col)
flowdata = unique(flowdata)
# plot the volumes used one average
mean_vol = flowdata %>% group_by(plate_id,Row,Col) %>% summarise(mean_vol = mean(vols))
flowdata = merge(flowdata, mean_vol)
total_vol = flowdata %>% filter(time > refiltime-60*30) %>%
group_by(plate_id, Row, Col) %>% mutate(total = sum(vols)) %>%
select(-flow_rate, -vols, -timestamp, -timepoint, -time) %>% unique() %>% mutate(remain = 1500-total)
# send an email if the volume gets below 200uL
if (min(total_vol$remain) < 300) {
from <- sprintf("<TurbyTrack@%s>","R")
to <- "<chory.e@gmail.com>"
subject <- "Volume on wells is <400uL"
body <- list("")
sendmail(from, to, subject, body,control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
print("HAMILTON...SMASH!!!")
}
errors = grep("urllib3.connectionpool", log$V1)
if (length(errors) > 0) {
from <- sprintf("<TurbyTrack@%s>","R")
to <- "<chory.e@gmail.com>"
# email my gmail... which autoforwards TurbyTracks to text message
subject <- "HAMILTON SMASH!"
body = "HAMILTON....SMASH!"
sendmail(from, to, subject, body, control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
}
print(paste("min volume remaining is",round(min(total_vol$remain))))
total_vol = melt(total_vol %>% select(plate_id, Row, Col, total, remain), id.vars = c("plate_id", "Row", "Col"))
# Plot ODs over time
# Calibration Experiment
print("saving plot.....")
used = ggplot(total_vol,  aes(x = Col, y = value, fill = variable)) +
geom_bar(stat = "identity", color = "black")+
facet_grid(Row ~ plate_id ) +
scale_fill_manual(values = c("white", "steelblue"))+
guides(fill = FALSE) +
scale_y_continuous(name = "Volume remaining (uL)",breaks = c(0,500,1000,1500)) +
scale_x_continuous(breaks = 1:12, name = "Column") +
ggtitle(paste(Sys.time(), "Media volume remaining in each well")) +
theme_minimal() +
theme(panel.spacing = unit(0, "lines"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pdf(paste("util/Figures/",Sys.Date()," volume remaining.pdf", sep = ""), height = 8, width = 24)
print(used)
dev.off()
delay = 60 #minutes
print(paste("Next update in", delay,"min."))
Sys.sleep(delay*60)
}
